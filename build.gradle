plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.orla.project.management'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

sourceSets {
	test {
		java {
			srcDirs = ['src/test/java']
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
	jvmArgs("-XX:+EnableDynamicAgentLoading")
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.postgresql:postgresql:42.7.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'org.mockito:mockito-core:5.13.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
}

test {
	useJUnitPlatform()
	testLogging.showStandardStreams = true
	testLogging {
		events = ["passed", "failed", "skipped"]
		exceptionFormat = "full"
	}
	finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

jacocoTestReport {
	dependsOn test
	executionData(fileTree(project.layout.buildDirectory).include("jacoco/*.exec"))

	reports {
		xml.required.set(true)
		html.required.set(true)
	}

	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				"com/orla/project/management/api/dtos/**",
				"com/orla/project/management/api/exceptions/**",
				"com/orla/project/management/api/mappers/**",
				"com/orla/project/management/api/models/**",
				"com/orla/project/management/api/repositories/**",
				"com/orla/project/management/api/ApiApplication.class"
		])
	}))
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	executionData(fileTree(project.layout.buildDirectory).include("jacoco/*.exec"))

	violationRules {
		rule {
			failOnViolation = true
			limit {
				counter = 'LINE'
				minimum = 0.6
			}
			limit {
				counter = 'BRANCH'
				minimum = 0.7
			}
			excludes = [
					"com/orla/project/management/api/dtos/**",
					"com/orla/project/management/api/exceptions/**",
					"com/orla/project/management/api/mappers/**",
					"com/orla/project/management/api/models/**",
					"com/orla/project/management/api/repositories/**",
					"com/orla/project/management/api/ApiApplication.class"
			]
		}
	}
}
